<?php

namespace Marlon\Lumen\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Str;

class ResponseMakeCommand extends Command
{
    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a response (marlon-lumen package).';

    /**
     * Filesystem instance.
     */
    protected FileSystem $fileSystem;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'make:response {name}';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct(Filesystem $fileSystem)
    {
        parent::__construct();

        $this->fileSystem = $fileSystem;
    }

    /**
     * Compile the request stub.
     *
     * @return string
     */
    protected function compileRequestStub()
    {
        $stub = $this->fileSystem->get(__DIR__ . '/../stubs/response.stub');

        $this->replaceClassName($stub, $this->getClassName())
            ->replaceNameSpace($stub, $this->getNamespace());

        return $stub;
    }

    /**
     * Get class name by name argument.
     *
     * @return string
     */
    protected function getClassName(): string
    {
        $explodedName = $this->getExplodedName();
       
        $class = Str::studly(array_pop($explodedName));

        if (!Str::endsWith($class, 'Response')) {
            $class .= 'Response';
        }

        return $class;
    }

    /**
     * Get name exploded by backslash.
     *
     * @return array
     */
    protected function getExplodedName(): array
    {
        return explode('\\', $this->argument('name'));
    }

    /**
     * Get namespace from name argument.
     *
     * @return string
     */
    protected function getNamespace(): string
    {
        $explodedName = $this->getExplodedName();
        array_pop($explodedName);

        $namespace = [];

        foreach ($explodedName as $part) {
            $namespace[] = Str::studly($part);
        }

        $namespace = implode('\\', $namespace);

        if (!empty($namespace)) {
            $namespace = '\\' . $namespace;
        }

        return $namespace;
    }

    /**
     * Get path where to place new generated file.
     *
     * @return string
     */
    protected function getPath(): string
    {
        return base_path()
            . '/app/Http/Response'
            . str_replace('\\', '/', $this->getNamespace())
            . '/' . $this->getClassName() . '.php';
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $path = $this->getPath();

        $this->makeDirectory($path);

        $stub = $this->compileRequestStub();

        $this->fileSystem->put($path, $stub);
    }

    /**
     * Build the directory for the class if necessary.
     *
     * @param  string $path
     * @return string
     */
    protected function makeDirectory(string $path)
    {
        if (!$this->fileSystem->isDirectory(dirname($path))) {
            $this->fileSystem->makeDirectory(dirname($path), 0777, true, true);
        }
    }

    /**
     * Replace {{class}} with correct class name generated by name option.
     *
     * @param [type] $stub
     * @param string $class
     * @return void
     */
    protected function replaceClassName(&$stub, string $class)
    {
        $stub = str_replace('{{class}}', $class, $stub);

        return $this;
    }

    /**
     * Replace {{namespace}} with correct namespace if necessary.
     *
     * @param [type] $stub
     * @param [type] $namespace
     * @return void
     */
    protected function replaceNameSpace(&$stub, string $namespace)
    {
        $stub = str_replace('{{namespace}}', $namespace, $stub);

        return $this;
    }
}
